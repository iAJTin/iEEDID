
namespace iTin.Core.Hardware.ConsoleApp
{
    using System;
    using System.Collections;
    using System.Collections.ObjectModel;
    using System.Drawing;

    using Specification;
    using Specification.Eedid;

    class Program
    {
        public class AcerAspireV17NitroBlackEdition
        {
            public static readonly byte[] IntegratedLaptopPanelEdidTable = new byte[]
            {
                0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x30, 0xe4, 0x69, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
                0x01, 0x04, 0x95, 0x26, 0x15, 0x78, 0x0a, 0x0b, 0xb5, 0xa3, 0x59, 0x55, 0xa0, 0x27, 0x0c, 0x50, 0x54, 0x00,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x2e, 0x36, 0x80, 0xa0, 0x70, 0x38, 0x1f, 0x40, 0x30, 0x20, 0x35, 0x00, 0x7e, 0xd7, 0x10, 0x00, 0x00, 0x1a,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0xfe, 0x00, 0x4c, 0x47, 0x20, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x0a, 0x20, 0x20,
                0x00, 0x00, 0x00, 0xfe, 0x00, 0x4c, 0x50, 0x31, 0x37, 0x33, 0x57, 0x46, 0x34, 0x2d, 0x53, 0x50, 0x46, 0x31,
                0x00, 0xd1
            };

            public static readonly byte[] LgUltrawideMonitorEdidTable = new byte[]
            {
                0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x1e, 0x6d, 0xf9, 0x76, 0x40, 0xa9, 0x01, 0x00, 0x0a, 0x1b,
                0x01, 0x03, 0x80, 0x50, 0x22, 0x78, 0xea, 0xca, 0x95, 0xa6, 0x55, 0x4e, 0xa1, 0x26, 0x0f, 0x50, 0x54, 0x25,
                0x6b, 0x80, 0x71, 0x40, 0x81, 0x80, 0x81, 0xc0, 0xa9, 0xc0, 0xb3, 0x00, 0xd1, 0xc0, 0x81, 0x00, 0xd1, 0xcf,
                0xcd, 0x46, 0x00, 0xa0, 0xa0, 0x38, 0x1f, 0x40, 0x30, 0x20, 0x3a, 0x00, 0x1e, 0x4e, 0x31, 0x00, 0x00, 0x1a,
                0x29, 0x59, 0x00, 0xa0, 0xa0, 0x38, 0x27, 0x40, 0x30, 0x20, 0x3a, 0x00, 0x1e, 0x4e, 0x31, 0x00, 0x00, 0x1a,
                0x00, 0x00, 0x00, 0xfd, 0x00, 0x38, 0x4b, 0x1e, 0x5a, 0x18, 0x00, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x00, 0x00, 0x00, 0xfc, 0x00, 0x4c, 0x47, 0x20, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x57, 0x49, 0x44, 0x45, 0x0a,
                0x01, 0xa0
            };
        }

        public class Generic
        {
            public static readonly byte[] CeaTable =
            {
                0x02, 0x01, 0x04, 0x00, 0x01, 0x1d, 0x00, 0x72, 0x51, 0xd0, 0x1e, 0x20, 0x6e, 0x28, 0x55, 0x00,
                0x20, 0xc2, 0x31, 0x00, 0x00, 0x1e, 0x8c, 0x0a, 0xa0, 0x14, 0x51, 0xf0, 0x16, 0x00, 0x26, 0x7c,
                0x43, 0x00, 0x58, 0xc2, 0x21, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x01, 0x00, 0x52, 0x45, 0x56,
                0x31, 0x2e, 0x30, 0x30, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x39,
                0x39, 0x46, 0x43, 0x35, 0x30, 0x30, 0x30, 0x31, 0x0a, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84
            };

            public static readonly byte[] EdidTable =
            {
                0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x44, 0x89, 0xD4, 0x03, 0x15, 0xCD, 0x5B, 0x07, 0x1D, 0x14,
                0x01, 0x03, 0x80, 0x50, 0x2D, 0x78, 0x0A, 0x0D, 0xC9, 0xA0, 0x57, 0x47, 0x98, 0x27, 0x12, 0x48, 0x4C, 0x20,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x02, 0x3A, 0x80, 0x18, 0x71, 0x38, 0x2D, 0x40, 0x58, 0x2C, 0x45, 0x00, 0x20, 0xC2, 0x31, 0x00, 0x00, 0x1E,
                0x01, 0x1D, 0x80, 0x18, 0x71, 0x1C, 0x16, 0x20, 0x58, 0x2C, 0x25, 0x00, 0xC4, 0x8E, 0x21, 0x00, 0x00, 0x9E,
                0x00, 0x00, 0x00, 0xFC, 0x00, 0x48, 0x44, 0x4D, 0x49, 0x20, 0x41, 0x6E, 0x61, 0x6C, 0x79, 0x7A, 0x65, 0x72,
                0x00, 0x00, 0x00, 0xFD, 0x00, 0x17, 0xF1, 0x08, 0x8C, 0x17, 0x00, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x01, 0xAB, 0x02, 0x03, 0x60, 0x71, 0x5F, 0x90, 0x1F, 0x20, 0x05, 0x14, 0x04, 0x13, 0x03, 0x02, 0x12, 0x11,
                0x07, 0x06, 0x16, 0x15, 0x01, 0x0F, 0x0E, 0x1E, 0x1D, 0x0D, 0x0C, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x0A,
                0x0B, 0x09, 0x5C, 0x08, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E,
                0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x32, 0x0F, 0x7F, 0x07, 0x17,
                0x7F, 0x50, 0x3F, 0x7F, 0xC0, 0x57, 0x7F, 0x00, 0x5F, 0x7F, 0x01, 0x67, 0x7F, 0x00, 0x83, 0x4F, 0x00, 0x00,
                0x67, 0x03, 0x0C, 0x00, 0x10, 0x00, 0x38, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x82
            };

            public static readonly byte[] EdidTable1 =
            {
                0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x0c, 0xa1, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0x10, 0x0c,
                0x01, 0x03, 0x80, 0x50, 0x2D, 0x78, 0x0A, 0x0D, 0xC9, 0xA0, 0x57, 0x47, 0x98, 0x27, 0x12, 0x48, 0x4C, 0x20,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x01, 0x1d, 0x80, 0x18, 0x71, 0x1c, 0x16, 0x20, 0x58, 0x2C, 0x25, 0x00, 0x20, 0xC2, 0x31, 0x00, 0x00, 0x9e,
                0x8c, 0x0a, 0xd0, 0x8a, 0x20, 0xe0, 0x2d, 0x10, 0x10, 0x3e, 0x96, 0x00, 0x58, 0xc2, 0x21, 0x00, 0x00, 0x18,
                0x00, 0x00, 0x00, 0xfc, 0x00, 0x4d, 0x59, 0x20, 0x48, 0x44, 0x54, 0x56, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x00, 0x00, 0x00, 0xfd, 0x00, 0x3b, 0x3d, 0x0f, 0x2e, 0x08, 0x00, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x01, 0xc3, 0x02, 0x01, 0x04, 0x00, 0x01, 0x1d, 0x00, 0x72, 0x51, 0xd0, 0x1e, 0x20, 0x6e, 0x28, 0x55, 0x00,
                0x20, 0xc2, 0x31, 0x00, 0x00, 0x1e, 0x8c, 0x0a, 0xa0, 0x14, 0x51, 0xf0, 0x16, 0x00, 0x26, 0x7c, 0x43, 0x00,
                0x58, 0xc2, 0x21, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x01, 0x00, 0x52, 0x45, 0x56, 0x31, 0x2e, 0x30, 0x30,
                0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x39, 0x39, 0x46, 0x43, 0x35, 0x30, 0x30,
                0x30, 0x31, 0x0a, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x84
            };

            public static readonly byte[] EdidTable2 =
            {
                0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x42, 0x4c, 0x00, 0x50, 0x89, 0x13, 0x00, 0x00, 0x06, 0x17,
                0x01, 0x03, 0x0e, 0x2f, 0x1a, 0x78, 0x6f, 0xee, 0x91, 0xa3, 0x54, 0x4c, 0x99, 0x26, 0x0f, 0x50, 0x54, 0x21,
                0x08, 0x00, 0x81, 0x80, 0x81, 0x40, 0x81, 0x00, 0x90, 0x40, 0x95, 0x00, 0xa9, 0x40, 0xb3, 0x00, 0xd1, 0x00,
                0xc0, 0x12, 0x00, 0x00, 0x40, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e,
                0x00, 0x00, 0x00, 0xfd, 0x00, 0x38, 0x40, 0x05, 0xfa, 0xfa, 0x00, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x00, 0x00, 0x00, 0xfc, 0x00, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x73, 0x20, 0x56, 0x75, 0x0a,
                0x00, 0x00, 0x00, 0x10, 0x00, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x73, 0x0a, 0x0a, 0x0a, 0x0a,
                0x00, 0xae
            };

            public static readonly byte[] EdidTable3 =
            {
                0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x42, 0x4c, 0x00, 0x50, 0x8a, 0x13, 0x00, 0x00, 0x06, 0x17,
                0x01, 0x03, 0x0e, 0x2f, 0x1d, 0x78, 0x6f, 0xee, 0x91, 0xa3, 0x54, 0x4c, 0x99, 0x26, 0x0f, 0x50, 0x54, 0x21,
                0x08, 0x00, 0x81, 0x80, 0x81, 0x40, 0x81, 0x00, 0x90, 0x40, 0x95, 0x00, 0xa9, 0x40, 0xb3, 0x00, 0xd1, 0x00,
                0xe5, 0xa7, 0x20, 0x00, 0xd0, 0x34, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e,
                0x00, 0x00, 0x00, 0xfd, 0x00, 0x38, 0x40, 0x05, 0xfa, 0xfa, 0x00, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x00, 0x00, 0x00, 0xfc, 0x00, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x73, 0x20, 0x56, 0x75, 0x0a,
                0x00, 0x00, 0x00, 0x10, 0x00, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x73, 0x0a, 0x0a, 0x0a, 0x0a,
                0x00, 0xa8
            };

            public static readonly byte[] EdidTable4 =
            {
                0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x0d, 0xae, 0xdb, 0x15, 0x00, 0x00, 0x00, 0x00, 0x20, 0x19,
                0x01, 0x04, 0x95, 0x22, 0x13, 0x78, 0x02, 0xc3, 0xc5, 0x91, 0x55, 0x54, 0x94, 0x28, 0x24, 0x50, 0x54, 0x00,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0xda, 0x1d, 0x56, 0xe2, 0x50, 0x00, 0x20, 0x30, 0x44, 0x2d, 0x47, 0x00, 0x58, 0xc1, 0x10, 0x00, 0x00, 0x1a,
                0xe7, 0x13, 0x56, 0xe2, 0x50, 0x00, 0x20, 0x30, 0x44, 0x2d, 0x47, 0x00, 0x58, 0xc1, 0x10, 0x00, 0x00, 0x1a,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x00, 0x0c, 0x3a, 0xe0, 0x0d, 0x3c, 0x6e, 0x0d, 0x0d, 0x19, 0x7b, 0x00, 0x00, 0x00,
                0x00, 0x5f
            };

            public static readonly byte[] EdidTable5 =
            {
                0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x4c, 0xa3, 0x1a, 0xa1, 0x01, 0x01, 0x01, 0x01, 0x0e, 0x19,
                0x01, 0x03, 0x80, 0x00, 0x00, 0x78, 0x0a, 0xde, 0x50, 0xa3, 0x54, 0x4c, 0x99, 0x26, 0x0f, 0x50, 0x54, 0x21,
                0x08, 0x00, 0xa9, 0x40, 0x90, 0x40, 0x81, 0x80, 0x81, 0x40, 0x81, 0xc0, 0x95, 0x00, 0xb3, 0x00, 0xa9, 0xc0,
                0x64, 0x19, 0x00, 0x40, 0x41, 0x00, 0x26, 0x30, 0x18, 0x88, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
                0x02, 0x3a, 0x80, 0x18, 0x71, 0x38, 0x2d, 0x40, 0x58, 0x2c, 0x45, 0x00, 0x40, 0x84, 0x63, 0x00, 0x00, 0x1e,
                0x00, 0x00, 0x00, 0xfd, 0x00, 0x17, 0x55, 0x0f, 0x5c, 0x11, 0x00, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x00, 0x00, 0x00, 0xfc, 0x00, 0x45, 0x50, 0x53, 0x4f, 0x4e, 0x20, 0x50, 0x4a, 0x0a, 0x20, 0x20, 0x20, 0x20,
                0x01, 0x03
            };
        }

        public class MacBookPro2018
        {
            public static readonly byte[] IntegratedLaptopPanelEdidTable =
            {
                0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x42, 0x4c, 0x00, 0x50, 0x89, 0x13, 0x00, 0x00, 0x06,
                0x17, 0x01, 0x03, 0x0e, 0x21, 0x14, 0x78, 0x6f, 0xee, 0x91, 0xa3, 0x54, 0x4c, 0x99, 0x26, 0x0f, 0x50,
                0x54, 0x21, 0x08, 0x00, 0x81, 0x80, 0x81, 0x40, 0x81, 0x00, 0x90, 0x40, 0x95, 0x00, 0xa9, 0x40, 0xb3,
                0x00, 0xd1, 0x00, 0xe5, 0xa7, 0x20, 0x00, 0xd0, 0x34, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x38, 0x40, 0x05, 0xfa, 0xfa, 0x00, 0x0a, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
                0x6c, 0x73, 0x20, 0x56, 0x75, 0x0a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c,
                0x65, 0x6c, 0x73, 0x0a, 0x0a, 0x0a, 0x0a, 0x00, 0xc0
            };
        }

        public class SonyTV
        {
            public static readonly byte[] Panel720EdidTable =
            {
                0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x4d, 0xd9, 0x00, 0x96, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x01, 0x03, 0x80, 0x46, 0x28, 0x78, 0x0a, 0x0d, 0xc9, 0xa0, 0x57, 0x47, 0x98, 0x27, 0x12, 0x48, 0x4c, 0x00,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x01, 0x1d, 0x80, 0xd0, 0x72, 0x1c, 0x16, 0x20, 0x10, 0x2c, 0x25, 0x80, 0xdf, 0xa4, 0x21, 0x00, 0x00, 0x9e,
                0x8c, 0x0a, 0xd0, 0x8a, 0x20, 0xe0, 0x2d, 0x10, 0x10, 0x3e, 0x96, 0x00, 0xdf, 0xa4, 0x21, 0x00, 0x00, 0x18,
                0x00, 0x00, 0x00, 0xfc, 0x00, 0x53, 0x4f, 0x4e, 0x59, 0x20, 0x54, 0x56, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x00, 0x00, 0x00, 0xfd, 0x00, 0x30, 0x3e, 0x0e, 0x2e, 0x08, 0x00, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x01, 0xf4
            };
        }


        static void Main(string[] args)
        {
            Console.WriteLine(@" ——————————————————————————————————————————————————————————————");
            Console.WriteLine(" Implemented blocks");
            Console.WriteLine(@" ——————————————————————————————————————————————————————————————");

            EEDID acerAspireV17NitroSBlackEditionEedid = EEDID.Parse(MacBookPro2018.IntegratedLaptopPanelEdidTable);
            //EEDID acerAspireV17NitroSBlackEditionEedid = EEDID.Parse(AcerAspireV17NitroBlackEdition.IntegratedLaptopPanelEdidTable);
            DataBlockCollection blocks = acerAspireV17NitroSBlackEditionEedid.Blocks;
            foreach (KnownDataBlock block in blocks.ImplementedBlocks)
            {
                Console.WriteLine($@" > {block}");
            }

            var sss = acerAspireV17NitroSBlackEditionEedid.Blocks[KnownDataBlock.EDID].Sections.ImplementedSections;
            var ddd = acerAspireV17NitroSBlackEditionEedid.Blocks[KnownDataBlock.EDID].Sections[(int) KnownEdidSection.BasicDisplay].GetProperty(KnownEedidPropertiesDefinition.Edid.BasicDisplay.Gamma);

            foreach (DataBlock block in blocks)
            {
                Console.WriteLine();
                Console.WriteLine(@" ——————————————————————————————————————————————————————————————");
                Console.WriteLine($@" {block.Key} block");
                Console.WriteLine(@" ——————————————————————————————————————————————————————————————");

                BaseDataSectionCollection sections = block.Sections;
                foreach (DataSection section in sections)
                {
                    Console.WriteLine($@" > {section.Key} section");

                    Hashtable sectionProperties = section.Properties.Values;
                    foreach (DictionaryEntry property in sectionProperties)
                    {
                        object value = property.Value;

                        PropertyKey key = (PropertyKey) property.Key;
                        Enum id = key.PropertyId;

                        var valueUnit = key.PropertyUnit;
                        var unit =
                            valueUnit == PropertyUnit.None
                                ? string.Empty
                                : valueUnit.ToString();

                        if (value == null)
                        {
                            Console.WriteLine($@"   > {id} > NULL");
                            continue;
                        }

                        if (value is string)
                        {
                            Console.WriteLine($@"   > {id} > {value}{unit}");
                        }
                        else if (value is bool)
                        {
                            Console.WriteLine($@"   > {id} > {value}{unit}");
                        }
                        else if (value is double)
                        {
                            Console.WriteLine($@"   > {id} > {value}{unit}");
                        }
                        else if (value is byte)
                        {
                            Console.WriteLine($@"   > {id} > {value}{unit} [{value:X2}h]");
                        }
                        else if (value is short)
                        {
                            Console.WriteLine($@"   > {id} > {value}{unit} [{value:X4}h]");
                        }
                        else if (value is ushort)
                        {
                            Console.WriteLine($@"   > {id} > {value}{unit} [{value:X4}h]");
                        }
                        else if (value is int)
                        {
                            Console.WriteLine($@"   > {id} > {value}{unit} [{value:X4}h]");
                        }
                        else if (value is uint)
                        {
                            Console.WriteLine($@"   > {id} > {value}{unit} [{value:X4}h]");
                        }
                        else if (value is long)
                        {
                            Console.WriteLine($@"   > {id} > {value}{unit} [{value:X8}h]");
                        }
                        else if (value is ulong)
                        {
                            Console.WriteLine($@"   > {id} > {value}{unit} [{value:X8}h]");
                        }
                        else if (value is PointF)
                        {
                            Console.WriteLine($@"   > {id}");
                            Console.WriteLine($@"     > X > {((PointF)value).X}");
                            Console.WriteLine($@"     > Y > {((PointF)value).Y}");
                        }
                        else if (value.GetType() == typeof(ReadOnlyCollection<string>))
                        {
                            Console.WriteLine($@"   > {id} > {string.Join(", ", (ReadOnlyCollection<string>)value)}");
                        }
                        else if (value.GetType() == typeof(ReadOnlyCollection<byte>))
                        {
                            Console.WriteLine($@"   > {id} > {string.Join(", ",(ReadOnlyCollection<byte>) value)}");
                        }
                        else if (value is StandardTimingIdentifierDescriptorItem)
                        {
                            Console.WriteLine($@"   > {(StandardTimingIdentifierDescriptorItem)value}");
                        }
                        else if (value.GetType() == typeof(ReadOnlyCollection<MonitorResolutionInfo>))
                        {
                            var resolutions = (ReadOnlyCollection<MonitorResolutionInfo>)value;
                            foreach (MonitorResolutionInfo resolution in resolutions)
                            {
                                Console.WriteLine($@"   > {resolution}");
                            }
                        }
                        else
                        {
                            Console.WriteLine($@"   > {id} > {value}{unit}");
                        }
                    }
                }
            }

            Console.ReadLine();
        }
    }
}

//var edidBlock = eedid.Blocks[iTin.Core.Hardware.Specification.Eedid.KnownDataBlock.EDID];
//var edidSections = edidBlock.Sections.ImplementedSections;

//var edidSections = edidBlock.Sections as iTin.Core.Hardware.Specification.Eedid.EdidDataSectionCollection;
//var vendorSection = edidSections[iTin.Core.Hardware.Specification.Eedid.KnownEdidSection.Vendor].Properties.Values;
//var versionSection = edidSections[iTin.Core.Hardware.Specification.Eedid.KnownEdidSection.Version].Properties.Values;

//var ceaBlock = eedid.Blocks[iTin.Core.Hardware.Specification.Eedid.KnownDataBlock.CEA];
//var ceaSections = ceaBlock.Sections as iTin.Core.Hardware.Specification.Eedid.CeaDataSectionCollection;
//var ceaInformationSection = ceaSections[KnownCeaSection.Information];
//var ceaMonitorSupportSection = ceaSections[KnownCeaSection.MonitorSupport];
//var ceaDetailedTimmingSection = ceaSections[KnownCeaSection.DetailedTiming];
//var ceaDataBlockCollectionSection = ceaSections[KnownCeaSection.DataBlockCollection];
//var ceaCheckSumSection = ceaSections[KnownCeaSection.CheckSum];

//foreach (DataBlock block in blocks)
//{
//    TreeNode node = new TreeNode(block.Key.ToString());

//    foreach (DataSection section in block.Sections)
//    {
//        TreeNode node1 = node.Nodes.Add(section.Key.ToString());

//        if (!section.HasProperties) continue;
//        foreach (DictionaryEntry item in section.Properties.Values)
//        {
//            if (item.Value != null)
//            {
//                node1.Nodes.Add(item.Key + " = " + item.Value);
//            }
//        }
//    }            
//    trTree.Nodes.Add(node);
//}
